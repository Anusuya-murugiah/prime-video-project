pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        nodejs 'nodejs'
    }
    parameters {
        string(name: 'ECR_REPO_NAME', defaultValue: 'prime-video', description: 'enter your ecr repo name')
        string(name: 'AWS_ACCOUNT_ID', defaultValue: '484907494367', description: 'enter the accountid')
    }
    
    environment {
        SCANNER_HOME = tools "sonar-scanner"
    }

    stages {
        stage('git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Anusuya-murugiah/prime-video-project.git'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                sh """
                    $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectName=amazon-prime \
                    -Dsonar.projectKey=amazon-prime
                """    
                }
            }
        }
        stage('Qualitygate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
        stage('npm install') {
            steps {
                sh "npm install"
            }
        }
        stage('trivy scan') {
            steps {
                sh "trivy fs . > trviy-scan.txt"
            }
        }
        stage('docker image build') {
          steps {
              sh 'docker build -t "${params.ECR_REPO_NAME}" .'
          }
            
        }
        stage('create the ECR Repo') {
            steps {
                withCredentials([string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'), string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')]) {
                    sh """  
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY
                        aws configure set aws_secret_access_key $AWS_SECRET_KEY
                        aws ecr describe repositories --repository-name ${params.ECR_REPO_NAME} --region us-east-1 || \
                        aws ecr create-repository --repository-name ${params.ECR_REPO_NAME} --region us-east-1
                    """      
                }
            }
        }
        stage('login into ECR and tag the image') {
            steps {
                withCredentials([string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'), string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')]) {
                    sh """  
                        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com
                        docker tag ${params.ECR_REPO_NAME} ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:$BUILD_NUMBER
                        docker tag ${params.ECR_REPO_NAME} ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                    """      
                }
            }
        }
        stage('push the image') {
            steps {
                withCredentials([string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'), string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')]) {
                    sh """  
                        docker push ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:$BUILD_NUMBER
                        docker push ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                    """      
                }
            }
        }
        stage('remove the image') {
            steps {
                sh """
                    docker rmi ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:$BUILD_NUMBER
                    docker rmi ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                """
                
            }
        }
        
        
    }
}
